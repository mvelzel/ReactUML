package test.projecttojs.actions_old;

import java.awt.Component;
import java.util.*;

import com.vp.plugin.ViewManager;
import com.vp.plugin.model.*;

public class GenerateForm extends Helpers {
	public static String generateForm(String modelClass, IProject project, ViewManager viewManager, IClass definitionClass, Component parentFrame, String namespace){
		String code = "";
		
		classDefinition definition = GetFullClassDefinition(definitionClass.getId(), project, viewManager, parentFrame, true, namespace);
		
		code +=
		    "// " + definition.getName() + " Forms\n" +
		    "// \n" +
	        "// Generated by IC STRATEGY\n" +
	        "//\n" +
	        "// WARNING: Do not change this code; it will be overwritten by the next generation run!\n" +
	        "//          Change the code only in the Visual Paradigm Project.\n\n" +
	            //"import * as _ from 'lodash';\n" +
	        "import * as Attribute from '../../../js/3-domain/meta/Attribute';\n" +
	        "import {Form} from '../../../js/1-presentation/services/meta/Form';\n" +
	        "import * as FormField from '../../../js/1-presentation/services/meta/FormField';\n" +
	        "var DomainAPI = require('../domain-entity/DomainAPI');\n" +
	        "import {" + definition.getName() + "} from '../domain-entity/" + definition.getName() + "';\n" +
	        "\n";
		
		code +=
		    "class CreateForm extends Form {\n" +
	        "   constructor(){\n" +
		    "       super();\n" +
	        "       this.name = '" + definition.getName() + "CreateForm';\n";
		
		String label = definition.getName();
		ITaggedValue labelTag = null;
		for(ITaggedValue tag : definition.taggedValues){
			if(tag.getName().equals("label")){
				labelTag = tag;
				break;
			}
		}
		if(labelTag != null)
			label = labelTag.getValueAsString();
		
		code +=
		    "       this.title = '" + label + " toevoegen';\n" +
		    "       this.fields = {\n";
		
		List<String> fieldCode = new ArrayList<>();
		List<IAttribute> fieldCodeAttributes = new ArrayList<>();
		for(IAttribute attribute : definition.attributes){
			if(stringExistsInIterator(attribute.stereotypeIterator(), "cu") || stringExistsInIterator(attribute.stereotypeIterator(), "c"))
				fieldCodeAttributes.add(attribute);
		}
		for(IAttribute attribute : fieldCodeAttributes){
			fieldCode.add(attributeCode(attribute, definitionClass, definition, project, viewManager, parentFrame, namespace));
		}
		List<IAssociation> fromFieldCodeAssociations = new ArrayList<>();
		List<IAssociation> toFieldCodeAssociations = new ArrayList<>();
		for(IAssociation association : definition.fromAssociations){
			IAssociationEnd thisEnd = (IAssociationEnd) association.getFromEnd();
			if(stringExistsInIterator(thisEnd.stereotypeIterator(), "cu") || stringExistsInIterator(thisEnd.stereotypeIterator(), "c"))
				fromFieldCodeAssociations.add(association);
		}
		for(IAssociation association : definition.toAssociations){
			IAssociationEnd thisEnd = (IAssociationEnd) association.getToEnd();
			if(stringExistsInIterator(thisEnd.stereotypeIterator(), "cu") || stringExistsInIterator(thisEnd.stereotypeIterator(), "c"))
				toFieldCodeAssociations.add(association);
		}
		for(IAssociation association : fromFieldCodeAssociations){
			fieldCode.add(associationCode(association, true, definitionClass, viewManager, definition));
		}
		for(IAssociation association : toFieldCodeAssociations){
			fieldCode.add(associationCode(association, false, definitionClass, viewManager, definition));
		}
		code += String.join(",\n", fieldCode);
		code +=
		    "\n" +
		    "       }\n" +
		    "       delete this.buttons.remove;\n" +
	        "   };\n" +
	        "}\n\n";
	 
	    code +=
	        "class UpdateForm extends Form {\n" +
	    	"   constructor(){\n" +
	    	"       super();\n" +
	        "       this.name = '" + definition.getName() + "UpdateForm';\n";
	    
	    label = definition.getName();
		labelTag = null;
		for(ITaggedValue tag : definition.taggedValues){
			if(tag.getName().equals("label")){
				labelTag = tag;
				break;
			}
		}
		if(labelTag != null)
			label = labelTag.getValueAsString();
		code +=
		    "       this.title = '" + label + " wijzigen';\n" +
		    "       this.fields = {\n";
		
		fieldCode = new ArrayList<>();
		fieldCodeAttributes = new ArrayList<>();
		for(IAttribute attribute : definition.attributes){
			if(stringExistsInIterator(attribute.stereotypeIterator(), "cu") || stringExistsInIterator(attribute.stereotypeIterator(), "c"))
				fieldCodeAttributes.add(attribute);
		}
		for(IAttribute attribute : fieldCodeAttributes){
			fieldCode.add(attributeCode(attribute, definitionClass, definition, project, viewManager, parentFrame, namespace));
		}
		fromFieldCodeAssociations = new ArrayList<>();
		toFieldCodeAssociations = new ArrayList<>();
		for(IAssociation association : definition.fromAssociations){
			IAssociationEnd thisEnd = (IAssociationEnd) association.getFromEnd();
			if(stringExistsInIterator(thisEnd.stereotypeIterator(), "cu") || stringExistsInIterator(thisEnd.stereotypeIterator(), "c"))
				fromFieldCodeAssociations.add(association);
		}
		for(IAssociation association : definition.toAssociations){
			IAssociationEnd thisEnd = (IAssociationEnd) association.getToEnd();
			if(stringExistsInIterator(thisEnd.stereotypeIterator(), "cu") || stringExistsInIterator(thisEnd.stereotypeIterator(), "c"))
				toFieldCodeAssociations.add(association);
		}
		for(IAssociation association : fromFieldCodeAssociations){
			fieldCode.add(associationCode(association, true, definitionClass, viewManager, definition));
		}
		for(IAssociation association : toFieldCodeAssociations){
			fieldCode.add(associationCode(association, false, definitionClass, viewManager, definition));
		}
		if(fieldCode.size() > 0)
			code += String.join(",\n", fieldCode);
		code +=
		    "\n" +
		    "       }\n" +
		    "   };\n" +
	        "}\n\n";
	 
	    code +=
	        "class SelectForm extends Form {\n" +
	        "   constructor(){\n" +
	    	"       super();\n" +
	        "       this.name = '" + definition.getName() + "SelectForm';\n";
	    
	    label = definition.getName();
		labelTag = null;
		for(ITaggedValue tag : definition.taggedValues){
			if(tag.getName().equals("label")){
				labelTag = tag;
				break;
			}
		}
		if(labelTag != null)
			label = labelTag.getValueAsString();
		
		code +=
		    "       this.title = '" + label + " selecteren';\n" +
		    "       this.fields = {\n" +
	        "           id: new class extends FormField.Select { constructor(){ super(); this.name = 'id'; this.sequence = '01'; this.attribute = Attribute.SelectionAttribute({ name: 'id', options: spec.options || [], label: '', defaultFieldType: FormField.Select, help: 'Maak een selectie...' }); this.width = '12'; this.offset = '0'; this.getFocus = true;} }()\n" +
	        "       }\n" +
	        "       delete this.buttons.remove;\n" +
	        "   };\n" +
	        "}\n\n";
	 
	    code +=
	        "export {\n" +
	        "   CreateForm as CreateGenerator,\n" +
	        "   UpdateForm as Update,\n" +
	        "   SelectForm as Select\n" +
	        "}\n";
		
		return code;
	}
	
	private static String attributeCode(IAttribute attribute, IClass definitionClass, classDefinition definition, IProject project, ViewManager viewManager, Component parentFrame, String namespace){
		String attributeCode = "";
		AttributeClass.Attribute AttributeType = AttributeClass.getAttribute(attribute.getTypeAsString());
		if(attribute.getTypeAsString() == "ScriptAttribute")
			viewManager.showMessage(attribute.getName());
		ITaggedValue sequenceTag = null;
		if(attribute.getTaggedValues() != null){
			for(Iterator<?> iter = attribute.getTaggedValues().taggedValueIterator(); iter.hasNext();){
				ITaggedValue tag = (ITaggedValue) iter.next();
				if(tag.getName().equals("sequence")){
					sequenceTag = tag;
					break;
				}
			}
		}
		String sequence = "";
		if(sequenceTag != null)
			sequence = sequenceTag.getValueAsString();
		
		ITaggedValue widthTag = null;
		for(Iterator<?> iter = attribute.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("width")){
				widthTag = tag;
				break;
			}
		}
		int width = 12;
		if(widthTag != null)
			width = Integer.parseInt(widthTag.getValueAsString());
		
		ITaggedValue offsetTag = null;
		for(Iterator<?> iter = attribute.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("offset")){
				offsetTag = tag;
				break;
			}
		}
		int offset = 0;
		if(offsetTag != null)
			offset = Integer.parseInt(offsetTag.getValueAsString());
		
		ITaggedValue getFocusTag = null;
		for(Iterator<?> iter = attribute.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("getFocus")){
				getFocusTag = tag;
				break;
			}
		}
		String getFocus = "false";
		if(getFocusTag != null)
			getFocus = getFocusTag.getValueAsString();

		attributeCode +=
			"           " + attribute.getName() + ": new class extends FormField." + AttributeType.defaultFieldType.type + " { constructor(){ super(); this.sequence = '" + sequence + "'; this.attribute = new " + definition.getName() + "().attributes." + attribute.getName() + "; this.width = '" + width + "'; this.offset = '" + offset + "'; this.getFocus = " + getFocus + ";} }()";
		
		return attributeCode;
	}
	
	private static String findOptions(String optionsTag, ViewManager viewManager){
		if(optionsTag != null){
			String suffix = "";
			if(optionsTag.substring(0, 1).equals("[") && optionsTag.substring(optionsTag.length() - 1, optionsTag.length()).equals("]")){
				optionsTag = optionsTag.substring(1, optionsTag.length() - 1);
				if(optionsTag.contains(".")){
					try{
						List<String> optionsTagParts = Arrays.asList(optionsTag.split("\\."));
						optionsTag = optionsTagParts.get(0);
						suffix = ".get('" + optionsTagParts.get(1) + "')";
					}
					catch(Exception e){
						for(int i = 0; i < e.getStackTrace().length; i++){
							viewManager.showMessage("OptionsTag error occurred in line " + e.getStackTrace()[i].getLineNumber() + " in tag " + optionsTag);
						}
					}
				}
			}
			return "spec." + optionsTag + suffix;
		}
		return "";
	}
	
	private static String associationCode(IAssociation association, Boolean isFrom, IClass definitionClass, ViewManager viewManager, classDefinition definition){
		IAssociationEnd thisEnd;
		IAssociationEnd thatEnd;
		if(isFrom){
			thisEnd = (IAssociationEnd) association.getFromEnd();
			thatEnd = (IAssociationEnd) association.getToEnd();
		}
		else{
			thisEnd = (IAssociationEnd) association.getToEnd();
			thatEnd = (IAssociationEnd) association.getFromEnd();
		}
		String associationCode = "";
		
		ITaggedValue sequenceTag = null;
		for(Iterator<?> iter = thisEnd.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("sequence")){
				sequenceTag = tag;
				break;
			}
		}
		String sequence = "";
		if(sequenceTag != null)
			sequence = sequenceTag.getValueAsString();
		
		ITaggedValue labelTag = null;
		for(Iterator<?> iter = thisEnd.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("label")){
				labelTag = tag;
				break;
			}
		}
		String label = "";
		if(labelTag != null)
			label = labelTag.getValueAsString();
		
		ITaggedValue widthTag = null;
		for(Iterator<?> iter = thisEnd.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("width")){
				widthTag = tag;
				break;
			}
		}
		int width = 12;
		if(widthTag != null)
			width = Integer.parseInt(widthTag.getValueAsString());
		
		ITaggedValue offsetTag = null;
		for(Iterator<?> iter = thisEnd.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("offset")){
				offsetTag = tag;
				break;
			}
		}
		int offset = 0;
		if(offsetTag != null)
			offset = Integer.parseInt(offsetTag.getValueAsString());
		
		ITaggedValue getFocusTag = null;
		for(Iterator<?> iter = thisEnd.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("getFocus")){
				getFocusTag = tag;
				break;
			}
		}
		String getFocus = "false";
		if(getFocusTag != null)
			getFocus = getFocusTag.getValueAsString();
		
		String fieldType = "SelectAssociation";		
		if(thatEnd.getMultiplicity().endsWith("*"))
			fieldType = "MultiSelectAssociation";
		
		ITaggedValue optionsTag = null;
		for(Iterator<?> iter = thatEnd.getTaggedValues().taggedValueIterator(); iter.hasNext();){
			ITaggedValue tag = (ITaggedValue) iter.next();
			if(tag.getName().equals("options")){
				optionsTag = tag;
				break;
			}
		}
		String options = "";
		if(optionsTag != null){
			options = findOptions(optionsTag.getValueAsString(), viewManager);
			ITaggedValue filterTag = null;
			for(Iterator<?> iter = thatEnd.getTaggedValues().taggedValueIterator(); iter.hasNext();){
				ITaggedValue tag = (ITaggedValue) iter.next();
				if(tag.getName().equals("filter")){
					filterTag = tag;
					break;
				}
			}
			if(filterTag != null)
				options = "_.filter(" + options + ", function(option) { return " + filterTag.getValueAsString() + ";})";
		}
		associationCode +=
	        "           " + thisEnd.getName() + ": new class extends FormField." + fieldType + " { constructor(){ super(); this.sequence = '" + sequence + "'; this.attribute = " + definition.getName() + "().associations." + thisEnd.getName() + "; this.width = '" + width + "'; this.offset = '" + offset + "'; this.getFocus = " + getFocus + "; this.options = " + options + ";} }()";
		return associationCode;
	}
}
