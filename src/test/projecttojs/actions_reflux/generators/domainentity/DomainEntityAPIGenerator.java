package test.projecttojs.actions_reflux.generators.domainentity;

import com.vp.plugin.model.IOperation;
import test.projecttojs.actions_reflux.Helpers;
import test.projecttojs.actions_reflux.generators.DefaultMultiGenerator;
import test.projecttojs.actions_reflux.generators.MultiGenerator;

public class DomainEntityAPIGenerator extends DefaultMultiGenerator implements MultiGenerator {

    @Override
    public synchronized void generateFullText() {
        this.appendFullText("//\n" +
                "// " + this.getDefinition().getName() + " Actions\n" +
                "// \n" +
                "    '" + this.getDefinition().getName() + "Connect': { asyncResult: true },\n" +
                "    '" + this.getDefinition().getName() + "Disconnect': { asyncResult: true },\n" +
                "    '" + this.getDefinition().getName() + "CreateGenerator': { asyncResult: true },\n" +
                "    '" + this.getDefinition().getName() + "Update': { asyncResult: true },\n" +
                "    '" + this.getDefinition().getName() + "Delete': { asyncResult: true },\n" +
                "    '" + this.getDefinition().getName() + "Get': { asyncResult: false },\n" +
                "    '" + this.getDefinition().getName() + "LoadItemGenerator': { asyncResult: true },\n" +
                "    '" + this.getDefinition().getName() + "Refresh': { asyncResult: true },\n");

        Helpers.filterElementList(this.getDefinition().getOperations(), IOperation::getScope, o -> o.equals("classifier"))
                .forEach(o -> this.appendFullText("    '" + this.getDefinition().getName() + o.getName() + "': { asyncResult: true },\n"));
    }

    @Override
    public void generateEndText() {
        this.appendFullText("\n});\n" +
                "\nmodule.exports = API;");
    }

    @Override
    public void generateBeginText() {
        this.appendFullText("// DomainAPI\n//\n" +
                "// Generated by IC STRATEGY\n" +
                "//\n" +
                "// WARNING: Do not change this code; it will be overwritten with the next generation run!\n" +
                "//          Change the code only in Visual Paradigm.\n//\n" +
                "var Reflux = require('reflux');\n\n" +
                "var API = Reflux.createActions({");
    }

    public String getFolder() {
        return "domain-entity";
    }

    public String getName() {
        return "DomainAPI";
    }
}
