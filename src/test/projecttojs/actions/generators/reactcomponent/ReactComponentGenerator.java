package test.projecttojs.actions.generators.reactcomponent;

import com.vp.plugin.model.IAttribute;
import test.projecttojs.actions.ClassDefinition;
import test.projecttojs.actions.generators.Generator;
import test.projecttojs.actions.Helpers;
import test.projecttojs.actions.generators.DefaultSingleGenerator;
import test.projecttojs.actions.generators.reactcomponent.constructor.ConstructorGenerator;
import test.projecttojs.actions.generators.reactcomponent.operations.OperationsGenerator;
import test.projecttojs.actions.generators.reactcomponent.render.RenderGenerator;

import java.util.Arrays;
import java.util.List;

public class ReactComponentGenerator extends DefaultSingleGenerator implements Generator {
    public ReactComponentGenerator(ClassDefinition definition){
        super(definition);
    }

    @Override
    public void generateFullText() {
        ImportsGenerator imports = new ImportsGenerator(this.getDefinition());
        imports.generateFullText();
        String importsCode = imports.getFullText();

        ConstructorGenerator constructor = new ConstructorGenerator(this.getDefinition());
        constructor.generateFullText();
        String constructorCode = constructor.getFullText();

        RenderGenerator render = new RenderGenerator(this.getDefinition());
        render.generateFullText();
        String renderCode = render.getFullText();

        OperationsGenerator operations = new OperationsGenerator(this.getDefinition());
        operations.generateFullText();
        String operationsCode = operations.getFullText();

        String exportsCodeStart = "export default ";
        String exportsCodeMiddle = this.getDefinition().getName();
        String exportsCodeEnd = ";\n";
        if (Helpers.stringExistsInIterator(this.getDefinition().getStereotypes().iterator(), "history") || Helpers.stringExistsInIterator(this.getDefinition().getStereotypes().iterator(), "match")) {
            exportsCodeStart +=  "withRouter(";
            exportsCodeEnd = ");\n";
        }

        String mapStateToPropsCode = "";

        List<IAttribute> connections = Helpers.filterElementList(this.getDefinition().getAttributes(),
                c -> Arrays.asList(c.toStereotypeArray()),
                ss -> ss.contains("connect") || ss.contains("connectRoute") || ss.contains("load"));

        if (connections.size() > 0) {
            exportsCodeMiddle = "connect(mapStateToProps)(" + this.getDefinition().getName() + ")";
            mapStateToPropsCode += "function mapStateToProps(state) {\n" +
                    "    return {\n";
            boolean firstIter = true;
            for (IAttribute connection : connections) {
                ClassDefinition type = new ClassDefinition(connection.getTypeAsModel().getId(), false);

                mapStateToPropsCode += "        " + connection.getName() + ": state." + type.getName();
                if (!firstIter) {
                    mapStateToPropsCode += ",";
                }
                mapStateToPropsCode += "\n";
                firstIter = false;
            }
            mapStateToPropsCode += "    }\n" +
                    "}\n\n";
        }
        String exportsCode = exportsCodeStart + exportsCodeMiddle + exportsCodeEnd;

        this.appendFullText("// " + this.getDefinition().getName() + " React Component\n" +
                "//\n" +
                "// Generated by IC STRATEGY\n" +
                "//\n" +
                "// WARNING: Do not change this code; it will be overwritten by the next generation run!\n" +
                "//          Change the code only in the Visual Paradigm Project.\n\n");
        this.appendFullText(importsCode);
        this.appendFullText("\n" +
                "class " + this.getDefinition().getName() + " extends React.Component {\n" +
                constructorCode +
                "    render() {\n" +
                renderCode + "\n" +
                "    };\n" +
                operationsCode +
                "};\n\n" +
                mapStateToPropsCode +
                exportsCode);
    }

    public String getFolder() {
        return "react-component";
    }
}
